package Graphs;

/*https://www.youtube.com/watch?v=oNI0rf2P9gE*/
public class AllPairsShortestPathFloydWarshall {

	public static void main(String[] args) {
		int[][] data = { { 0, 3, Integer.MAX_VALUE, 7 }, { 8, 0, 2, Integer.MAX_VALUE }, { 5, Integer.MAX_VALUE, 0, 1 },
				{ 2, Integer.MAX_VALUE, Integer.MAX_VALUE, 0 } };

		int n = data.length;
		for (int i = 1; i <= n; i++) {
			for (int j = 1; j <= n; j++) {
				System.out.print(data[i - 1][j - 1] + "      ");
			}
			System.out.println();
		}
		System.out.println("******************");
		data = new AllPairsShortestPathFloydWarshall().getAllPairsShortPath(data);

		for (int i = 1; i <= n; i++) {
			for (int j = 1; j <= n; j++) {
				System.out.print(data[i - 1][j - 1] + "      ");
			}
			System.out.println();
		}

	}

	/*
	 * for every node, arrange the matrix such that that curr node comes between i
	 * and j.
	 */
	int[][] getAllPairsShortPath(int[][] data) {

		int n = data.length;

		for (int k = 1; k <= n; k++) {
			for (int i = 1; i <= n; i++) {
				for (int j = 1; j <= n; j++) {
					if (i != k && j != k) {
						if (data[i - 1][j - 1] == Integer.MAX_VALUE) {
							if (data[i - 1][k - 1] == Integer.MAX_VALUE || data[k - 1][j - 1] == Integer.MAX_VALUE) {
								data[i - 1][j - 1] = Integer.MAX_VALUE;
							} else {
								data[i - 1][j - 1] = data[i - 1][k - 1] + data[k - 1][j - 1];
							}
						} else if (data[i - 1][k - 1] == Integer.MAX_VALUE || data[k - 1][j - 1] == Integer.MAX_VALUE) {
							data[i - 1][j - 1] = data[i - 1][j - 1];
						} else {
							data[i - 1][j - 1] = Math.min(data[i - 1][j - 1], data[i - 1][k - 1] + data[k - 1][j - 1]);
						}
					}
				}
			}
		}

		return data;
	}

}
